import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {
    

     public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] result = new int[2];
        GraphComponent graph = new GraphComponent();
        graph.init(2*n);
        for (int i = 0; i <n; i++) {
            int g = sc.nextInt();
            int b = sc.nextInt();
            graph.union(g, b);
        }
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < 2*n; i++) {
            int p = graph.find(i);
            int s = graph.size[p];
            if (s > 1) {
                if (min > s){
                     min = s;
                }
                if (max < s){
                     max = s;
                }
            }
        }
        result[0] = min;
        result[1] = max;
        System.out.println(result[0]+" "+result[1]);
    }



     static class GraphComponent {
        static final int MAX = 30001;
        int parent[] = new int[MAX];
        int size[] = new int[MAX];
        
        public void init(int n) {
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }

        public void union(int u, int v) {
            int i = find(u);
            int j = find(v);
            if (i == j){ 
                return;
            }
            parent[i] = j;
            size[j] += size[i];
        }

        public int find(int u) {
            if (parent[u] == u){
                 return u;
            }
            else{
                 return parent[u] = find(parent[u]);
            }
        }
    }
   
   
}
